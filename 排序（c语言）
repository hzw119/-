#include<stdio.h>
#include<stdlib.h>
#define Item int

void swap(Item *a,Item *b){
	Item temp;
	temp = *a;
	*a = *b;
	*b = temp;
}
void bubble(Item a[],int n )
{
	int i,j;
	for (i =0; i<n-1; i++)
	{
		for(j=0; j<n-1-i; j++)
		{
			if(a[j]>a[j+1])swap(&a[j],&a[j+1]);
		}
	}
}

void bubbleSort_Mod(Item a[],int n){
	bool flag = 1;
	for(int i =0; i<n-1&& flag ;i++){
		flag=0;
		for(int j = i; j<n-1-i; j++ ){
			if(a[j] > a[j+1] ){
				swap(&a[j],&a[j+1]);
				flag = 1;
			}
		}
	}
}

void insertion(Item a[],int n)
{
	for(int i=1; i<n; i++ )
	{
		Item temp = a[i];
		for(int j = i-1; j>=0&& temp<a[j] ; j--)
		{
			a[j+1] = a[j];
		}
		a[j+1] = temp;
	}
}


void BinaryInsertion(Item a[],int n)
{
	int low,high,j,mid;
	for(int i=1; i<n; i++)
	{
		if(a[i]<a[i-1])
		{
			Item temp = a[i];
			low = 0;
			high = i-1;
			while (low <= high)
			{
				mid = (low + high)/2;
				if(a[mid] > temp )high = mid-1;
				else low = mid + 1; 
			}

			for(j=i-1; j>=low; j--)
			{
				a[j+1] = a[j];
			}
			a[low] = temp;
		}
	}
}

void shellSort(Item a[],int n,int increnent[] ,int incresize )
{
	int incr,i,j;Item temp;
	for(int m =0; m <incresize ; m++)
	{
		incr = increnent[m];
		for (i = a[incr]; i<n; i++)
		{
			if(a[i]<a[i-incr])
			{
				temp = a[i];
				for(j=i-incr; j>=0 && temp < a[j]; j-=incr )
				{
					a[j+incr] = a[j];
				}
				a[j+incr]=temp;
			}
		}
	}
}
/*
void selection(Item a[],int n)
{
	int min;
	for(int i=0; i<n; i++)
	{
		for(int j=i,min=j; j<n; j++)
		{
			if(a[min]>a[j])min=j;
		}
		swap(&a[i],&a[min]);
	}
}
*/
int partition(Item a[],int low,int high)
{
	int i = low;
	int j = high+1;
	while(true)
	{
		while(a[++i] < a[low]);
		while(a[--j] > a[low]);
		if(i>=j)break;
		swap(&a[i],&a[j]);
	}
	swap(&a[j],&a[low]);
	return j;
}

void quickSort(Item a[], int low ,int high)
{
	if(low >= high)return;
	int i = partition(a,low,high);
	quickSort(a,low,i-1);
	quickSort(a,i+1,high);
}

void quickSortMod(Item a[], int low ,int high)//少者优先递归
{
	if(low>=high)return;
	int i = partition(a,low,high);
	if(i-1 < high-i )
	{
		quickSortMod(a,low,i-1);quickSortMod(a,i+1,high);
	}
	else
	{
		quickSortMod(a,i+1,high);quickSortMod(a,low,i);
	}
}

int Random(int low ,int high)
{
	return low + rand()%(high-low);
}

int RandPartition(Item a[],int low ,int high)
{
	int i = Random(low,high);
	swap(&a[low],&a[i]);
	return partition(a,low,high);
}
void RandQuickSort(Item a[],int low ,int high)
{
	if(low>=high)return;
	int i=RandPartition(a,low,high);
	RandQuickSort(a,low,i-1);
	RandQuickSort(a,i+1,high);
}

void comswap(int *a,int *b)//最终*a<*b
{
	if(*a > *b )
	{
		int temp = *a;
		*a = *b;
		*b =temp;
	}
}
int halfPartition(Item a[],int low ,int high)//三数取中快速排序
{
	swap(&a[high-1],&a[(low+high)/2]);
	comswap(&a[low],&a[high-1]);
	comswap(&a[low],&a[high]);
	comswap(&a[high-1],&a[high]);
	return partition(a,low,high);
}
void halfQuickSort(Item a[],int low ,int high)//三数取中快速排序
{
	if(low >= high)return;
	int i = halfPartition(a,low,high);
	halfQuickSort(a,low,i-1);
	halfQuickSort(a,i+1,high);
}
void divQuickSort(Item a[],int low,int high)
{
	if(low >= high)return;
	int i,j,p,q,k;Item temp;
	i=low;j=high+1;p=i;q=j;temp=a[low];
	while(true)
	{
		while(a[++i]<temp);
		while(a[--j]>temp)if(j==low)break;
		if(i>=j)break;
		swap(&a[i],&a[j]);
		if(a[i]==temp)
		{
			p++;swap(&a[i],&a[p]);
		}
		if(a[j]==temp)
		{
			q--;swap(&a[j],&a[q]);
		}
	}
	swap(&a[low],&a[j]);
	i=j-1;
	j=j+1;
	for(k =low+1;k<=p;k++,i--)
	{
		swap(&a[i],&a[k]);
	}
	for(k=high;k>=q;k--,j++)
	{
		swap(&a[k],&a[j]);
	}
	divQuickSort(a,low,i);
	divQuickSort(a,j,high);

}



void print(Item a[],int n)
{
	int i;
	for(i=0;i<n;i++){
		printf("%d,",a[i]);
	}
}

int main(){
	int a[]={684,56,4,84,79842,2,5,64,7,52,215,849,151,1,89,7,2};
	int n = sizeof(a)/sizeof(int);
	//bubble(a,n);
	//bubbleSort_Mod(a,n);
	//insertion(a,n);
	//BinaryInsertion(a,n);
	//int increnent[]={1,3,5};
	//int incresize = sizeof(increnent)/sizeof(int);
	//shellSort(a,n,increnent,incresize);
	//selection(a,n);
	//quickSort(a,0,n-1);
	//RandQuickSort(a,0,n-1);
	//quickSortMod(a,0,n-1);
	//halfQuickSort(a,0,n-1);
	divQuickSort(a,0,n-1);
	print(a,n);

	

}

//printf("%d",Random(5,9));
